# -*- coding: utf-8 -*-

# Copyright (c) 2014, KOL
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTLICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import common as Common


def MediaObjectsForURL(url):
    url = Common.InitMetaUrl(url)
    item = url.item

    session = None
    episode = None
    season = None

    if not url.episode:
        session = JSON.StringFromObject(item['session'])
    else:
        if url.episode:
            season = item['season']
            episode = url.episode

    return [
        MediaObject(
            parts=[PartObject(
                key=Callback(
                    Play,
                    url=item['url'],
                    season=season,
                    episode=episode,
                    session=session
                ),
            )],
            video_resolution=720,
            container='mpegts',
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            optimized_for_streaming=True,
            audio_channels=2
        )
    ]


def MetadataObjectForURL(url):

    url = Common.InitMetaUrl(url)

    item = url.item
    episode = url.episode

    kwargs = {
        'source_title': L(Common.TITLE),
    }

    for k in [
        'summary', 'thumb',
        'directors',
        'rating', 'duration',
        'originally_available_at',
    ]:
        if k in item and item[k]:
            kwargs[k] = item[k]

    if episode:
        if 'roles' in item:
            kwargs['guest_stars'] = item['roles']

        obj = EpisodeObject(
            rating_key=Common.GetEpisodeURL(
                item['url'],
                item['season'],
                episode
            ),
            title=u'%d серия' % episode,
            season=int(item['season']),
            index=int(episode),
            show=item['title'],
            **kwargs
        )
    else:
        for k in ['year', 'original_title', 'countries']:
            if k in item and item[k]:
                kwargs[k] = item[k]

        obj = MovieObject(
            title=item['title'],
            rating_key=item['url'],
            **kwargs
        )

    return obj


@indirect
def Play(session, url, season, episode):
    Log.Debug('Get playlist from %s' % url)

    if not session:
        url_info = Common.GetInfoByURL(Common.GetEpisodeURL(
            url, season, episode
        ), url)

        if not url_info:
            raise Ex.MediaNotAvailable

        session = url_info['session']
    else:
        session = JSON.ObjectFromString(session)

    res = JSON.ObjectFromURL(
        url='http://moonwalk.cc'+session['query'],
        values=session['values'],
        headers=session['headers'],
        method='POST',
        cacheTime=0
    )

    if not res:
        raise Ex.MediaNotAvailable

    try:
        res = HTTP.Request(res['mans']['manifest_m3u8']).content
        Log.Debug('Found streams: %s' % res)
    except Exception as e:
        Log.Error(u'%s' % e)
        Log.Debug(session)
        Log.Debug(res)
        raise Ex.MediaNotAvailable

    res = [line for line in res.splitlines() if line].pop()

    Log.Debug('Try to play %s' % res)

    res = Callback(Playlist, res=res)

    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(res))


def Playlist(res, **kwargs):

    # Some players does not support gziped response
    Log.Debug('Modify playlist %s' % res)

    path = res.replace('tracks-2,4', 'tracks-1,4').split('/')
    path.pop()
    path = '/'.join(path)
    try:
        res = HTTP.Request(res).content.splitlines()
    except:
        raise Ex.MediaNotAvailable

    for i in range(0, len(res)):
        if res[i] == '#EXT-X-ENDLIST':
            break
        if res[i][:1] != '#':
            res[i] = path + '/' + res[i]

    return "\n".join(res)

