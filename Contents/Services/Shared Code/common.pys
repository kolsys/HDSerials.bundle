# -*- coding: utf-8 -*-

# Copyright (c) 2014, KOL
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTLICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import urllib
import os
from string import Template

PREFIX = '/video/hdserials'
HDSERIALS_URL = 'http://www.hdserials.tv'

HDSERIALS_META_ROUTE = PREFIX + '/getmeta'

KEY_CACHE = 'parse_cache'
KEY_HISTORY = 'history'

HISTORY_SIZE = 20

ART = 'art-default.jpg'
ICON = 'icon-default.png'
TITLE = 'Title'


def GetVideoObject(item, episode=0):

    if item['session'] == 'external':
        url = info['url']
    else:
        url = MetaUrl('%s||%s' % (item['path'], episode))
        url.update(item, episode)

    return URLService.MetadataObjectForURL(url)


def GetEpisodeURL(url, season, episode):
    if season:
        return '%s?season=%d&episode=%d' % (url, int(season), int(episode))
    return url


def GetToken(item):
    if 'serial_token' in item and item['serial_token'] is not None:
        return item['serial_token']
    return item['video_token']


def GetInfoByURL(url, parent=None):
    if not url.startswith('http://moonwalk.cc/'):
        return {
            'url': url.replace('vkontakte.ru', 'vk.com'),
            'session': 'external',
        }

    headers = {}
    if parent:
        headers['Referer'] = parent
        if 'Referer' in HTTP.Headers:
            url = '%s&%s' % (
                url,
                urllib.urlencode({'referer': HTTP.Headers['Referer']})
            )

    elif 'Referer' in HTTP.Headers:
        headers['Referer'] = HTTP.Headers['Referer']

    try:
        page = HTML.ElementFromURL(
            url,
            cacheTime=300,
            headers=headers
        )
    except Ex.HTTPError, e:
        Log.Debug(e.hdrs)
        Log(e.msg)
        return None

    data = {}
    values = None
    token = None
    source = None

    for script in page.xpath('//script'):
        src = script.text_content()

        search = Regex(
            ('new VideoBalancer\(({(?:[^;]+)})\);')
        ).search(src)

        if search:
            data.update(JSON.ObjectFromString(
                Regex('encodeURIComponent\(([^\)]+)\)').sub('\\1', search.group(1))
            ))
            continue

        search = Regex(
            ('window(?:\[(?:"|\')|\.)([a-f0-9]+)(?:(?:\'|")\])?\s*=\s*\'([a-f0-9]+)\'')
        ).search(src)

        if search:
            token = search.group(1)
            data[token] = search.group(2)
            continue

        src = script.get('src')
        if src:
            try:
                source = HTTP.Request('http://moonwalk.cc'+src, cacheTime=CACHE_1HOUR).content
                values = Regex(
                    ('({[^{]+p_domain_id[^}]+})')
                ).search(source).group(1)

            except:
                continue

    if not data or not values or not token:
        return None

    try:
        values = Template(
            Regex(':[^:,"]+\.([^\.,}"]+)').sub(':"$\\1"', values)
        ).safe_substitute(data)
        values = JSON.ObjectFromString(values)

        search = Regex(
            ('[a-z]+(?:\[(?:"|\')|\.)([a-f0-9]+)(?:(?:\'|")\])?\s*=\s*[a-z]+(?:\[(?:"|\')|\.)'+token+'(?:(?:\'|")\])?')
        ).search(source)
        values[search.group(1)] = data[token]

    except:
        Log.Debug(values)
        Log(e.msg)
        return None

    data.update({
        'url': parent if parent else url,
        'session': {
            'query': '/manifests/video/' + data['video_token'] + '/all',
            'values': values,
            'headers': {
                'X-Requested-With': 'XMLHttpRequest',
                'Referer': url,
                'Cookie': HTTP.CookiesForURL(url)
            }
        }
    })

    if 'user_token' in data:
        data['session']['headers']['X-Access-Level'] = data['user_token']

    return data


def GetPage(uri, cacheTime=CACHE_1HOUR):
    try:
        if HDSERIALS_URL not in uri:
            uri = HDSERIALS_URL+uri

        res = HTML.ElementFromString(Regex(
            '<style=[^>]+>([^:]+)',
            Regex.MULTILINE
        ).sub(
            r'<span>\1</span>',
            HTTP.Request(uri, cacheTime=cacheTime).content
        ))

        HTTP.Headers['Referer'] = uri
    except:
        res = HTML.Element('error')

    return res


def InitMetaUrl(url):
    Log.Debug('Normalize URL: %s' % url)

    try:
        # has attribute crutch
        if url.item:
            return url
    except:

        # Fetch there. Replace - Samsung-TV crutch
        res = url.replace('%7C%7C', '||').split('||')
        res.reverse()

        path = res.pop()
        episode = res.pop() if len(res) else 0

        url = MetaUrl(url)

        try:
            res = JSON.ObjectFromString(urllib.urlopen(
                'http://127.0.0.1:32400%s?%s' % (
                    HDSERIALS_META_ROUTE,
                    urllib.urlencode({
                        'path': path,
                        'episode': episode,
                        'X-Plex-Token': os.environ['PLEXTOKEN'] if 'PLEXTOKEN' in os.environ else None
                    })
                )
            ).read())

            if res:
                return url.update(res, episode)

        except Exception as e:
            Log.Error(u'%s' % e)
            pass

    raise Ex.MediaNotAvailable


class MetaUrl(str):
    item = None
    episode = None

    def update(self, item, episode):
        self.item = item
        self.episode = int(episode)
        return self
